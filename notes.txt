- Add special config to dev server on boot.rb

- Facebook sdk login code:

logout(){
  this.props.logout();
  FB.getLoginStatus(response => {
    if (response.status === "connected") {
      FB.logout();
    }
  });
}

// checkLoginState(){
//   FB.getLoginStatus(response => {
//     if (response.status !== "connected") {
//       this.statusChangeCallback(response);
//     }
//   });
// }
//
// getUserData(userData){
//   FB.api('/me', {fields: 'email, name, id'}, function(response) {
//     const img = "http://graph.facebook.com/"+response.id+"/picture";
//     userData.email = response.email;
//     userData.username = response.name;
//     userData.avatar = img;
//   });
// }
//
// statusChangeCallback(r) {
//   FB.login(response => {
//     if (response.status === 'connected') {
//       // Logged into your app and Facebook.
//       const url = 'api/v1/session/rest-auth/facebook/';
//       const data = {
//         access_token: response.authResponse.accessToken,
//         code: response.authResponse.signedRequest
//       };
//       this.props.socialLogin(data, url);
//
//     } else if (response.status === 'not_authorized') {
//       // The person is logged into Facebook, but not your app.
//     } else {
//       // The person is not logged into Facebook, so we're not sure if
//       // they are logged into this app or not.
//     }
//   }, {scope: 'public_profile, email' });
// }


- Challenges:
  - Player component must be able to identify what collection of songs is expected to be played (Playlist, top 50, categories, album)
  - Roll out custom audio player
  - Maximize usability of common functionality components (session modal, track)
  - Read embedded data from iv3 tags and format image 
